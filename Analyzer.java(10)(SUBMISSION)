import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Analyzer {
	//had difficulty figuring out the actual hash code expression and how to get that printed out just like the sample output
    public static int hashCode(int a, String x) {
        int hash = 0;
        for (int i = 0; i < x.length(); i++) {
            hash = a * hash + x.charAt(i); //this calculates hash using formula: hash = a * hash + x.charAt(i) (HORNER METHOD)
        }
        return hash;
    }

    public static void main(String[] args) {
        // Array of values to use for a
        int[] valuesOfA = { 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 };
        
        //iterate over the values of a
        for (int a : valuesOfA) {
            System.out.println("Hash code expression for a=" + a + ": hash = " + a + " * hash + x.charAt(i)");
            
            //create a new hash table to store the words and their hash codes
            Map<Integer, List<String>> hashCodes = new HashMap<>();
            try {
                //open the dictionary.txt file for reading
                Scanner scanner = new Scanner(new File("dictionary.txt"));
                while (scanner.hasNextLine()) {
                    //read in the next word from the file 
                    String word = scanner.nextLine().trim();
                    
                    //compute the hash code for the word using the specified value of a
                    int hashCode = hashCode(a, word);
                    
                    //get the list of words that have the same hash code as this word
                    List<String> wordsWithSameHashCode = hashCodes.getOrDefault(hashCode, new ArrayList<>());
                    
                    //add this word to the list of words with the same hash code
                    wordsWithSameHashCode.add(word);
                    
                    //put the updated list back into the hash table with the hash code as the key
                    hashCodes.put(hashCode, wordsWithSameHashCode);
                }
                scanner.close(); //close the file
            } catch (FileNotFoundException e) { //handle any file not found exceptions
                System.out.println("File not found: " + e.getMessage());
                return;
            }
            
            //print out the needed stats
            System.out.println("Value of a: " + a);
            System.out.println("Size of map: " + hashCodes.size());
            
            //find the maximum number of collisions (the maximum number of words with the same hash code)
            int maxCollisionValue = 0;
            List<String> maxCollisionList = new ArrayList<>();
            for (Map.Entry<Integer, List<String>> entry : hashCodes.entrySet()) {
                List<String> wordsWithSameHashCode = entry.getValue();
                if (wordsWithSameHashCode.size() > maxCollisionValue) {
                    maxCollisionValue = wordsWithSameHashCode.size();
                    maxCollisionList = wordsWithSameHashCode;
                }
            }
            System.out.println("Max Collisions: " + maxCollisionValue);
            if (maxCollisionValue < 20) {
				//made it less than 20 so it wouldnt take up the whole output screen. 
                System.out.println(maxCollisionList);
            }
            System.out.println("-------------------------------------------------------");
        }
    }
}
